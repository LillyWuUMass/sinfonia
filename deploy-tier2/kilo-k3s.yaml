apiVersion: v1
data:
  cni-conf.json: "{\n   \"cniVersion\":\"0.4.0\",\n   \"name\":\"kilo\",\n   \"plugins\"\
    :[\n      {\n         \"name\":\"kubernetes\",\n         \"type\":\"bridge\",\n\
    \         \"bridge\":\"kube-bridge\",\n         \"isDefaultGateway\":true,\n \
    \        \"forceAddress\":true,\n         \"mtu\": 1420,\n         \"ipam\":{\n\
    \            \"type\":\"host-local\"\n         }\n      },\n      {\n        \
    \ \"type\":\"portmap\",\n         \"snat\":true,\n         \"capabilities\":{\n\
    \            \"portMappings\":true\n         }\n      }\n   ]\n}\n"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kilo
  name: kilo
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kilo
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kilo
rules:
- apiGroups:
  - ''
  resources:
  - nodes
  verbs:
  - list
  - patch
  - watch
- apiGroups:
  - kilo.squat.ai
  resources:
  - peers
  verbs:
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kilo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kilo
subjects:
- kind: ServiceAccount
  name: kilo
  namespace: kube-system
---
apiVersion: v1
data:
  init.sh: "#!/bin/sh\ncat > /etc/kubernetes/kubeconfig <<EOF\n    apiVersion: v1\n\
    \    kind: Config\n    name: kilo\n    clusters:\n    - cluster:\n        server:\
    \ $(sed -n 's/.*server: \\(.*\\)/\\1/p' /var/lib/rancher/k3s/agent/kubelet.kubeconfig)\n\
    \        certificate-authority: /var/lib/rancher/k3s/agent/server-ca.crt\n   \
    \ users:\n    - name: kilo\n      user:\n        token: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\n\
    \    contexts:\n    - name: kilo\n      context:\n        cluster: kilo\n    \
    \    namespace: ${NAMESPACE}\n        user: kilo\n    current-context: kilo\n\
    EOF\n"
kind: ConfigMap
metadata:
  name: kilo-scripts
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/name: kilo
    app.kubernetes.io/part-of: kilo
  name: kilo
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kilo
      app.kubernetes.io/part-of: kilo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kilo
        app.kubernetes.io/part-of: kilo
    spec:
      containers:
      - args:
        - --kubeconfig=/etc/kubernetes/kubeconfig
        - --hostname=$(NODE_NAME)
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: squat/kilo:0.6.0
        name: kilo
        ports:
        - containerPort: 1107
          name: metrics
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/cni/net.d
          name: cni-conf-dir
        - mountPath: /var/lib/kilo
          name: kilo-dir
        - mountPath: /etc/kubernetes
          name: kubeconfig
          readOnly: true
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
          readOnly: false
      hostNetwork: true
      initContainers:
      - args:
        - /scripts/init.sh
        command:
        - /bin/sh
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: squat/kilo:0.6.0
        imagePullPolicy: Always
        name: generate-kubeconfig
        volumeMounts:
        - mountPath: /etc/kubernetes
          name: kubeconfig
        - mountPath: /scripts/
          name: scripts
          readOnly: true
        - mountPath: /var/lib/rancher/k3s/agent/
          name: k3s-agent
          readOnly: true
      - command:
        - /bin/sh
        - -c
        - set -e -x; cp /opt/cni/bin/* /host/opt/cni/bin/; TMP_CONF="$CNI_CONF_NAME".tmp;
          echo "$CNI_NETWORK_CONFIG" > $TMP_CONF; rm -f /host/etc/cni/net.d/*; mv
          $TMP_CONF /host/etc/cni/net.d/$CNI_CONF_NAME
        env:
        - name: CNI_CONF_NAME
          value: 10-kilo.conflist
        - name: CNI_NETWORK_CONFIG
          valueFrom:
            configMapKeyRef:
              key: cni-conf.json
              name: kilo
        image: squat/kilo:0.6.0
        name: install-cni
        volumeMounts:
        - mountPath: /host/opt/cni/bin
          name: cni-bin-dir
        - mountPath: /host/etc/cni/net.d
          name: cni-conf-dir
      serviceAccountName: kilo
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - hostPath:
          path: /opt/cni/bin
        name: cni-bin-dir
      - hostPath:
          path: /etc/cni/net.d
        name: cni-conf-dir
      - hostPath:
          path: /var/lib/kilo
        name: kilo-dir
      - emptyDir: {}
        name: kubeconfig
      - configMap:
          name: kilo-scripts
        name: scripts
      - hostPath:
          path: /var/lib/rancher/k3s/agent
        name: k3s-agent
      - hostPath:
          path: /lib/modules
        name: lib-modules
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
