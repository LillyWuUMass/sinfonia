# SPDX-FileCopyrightText: 2021-2022 Carnegie Mellon University
# SPDX-License-Identifier: MIT
---
- name: add monitoring namespace
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    name: monitoring
    api_version: v1
    kind: Namespace
    state: present

- name: deploy kube-prometheus-stack
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    resource_definition:
      apiVersion: helm.cattle.io/v1
      kind: HelmChart
      metadata:
        name: kube-prometheus-stack
        namespace: monitoring
      spec:
        chart: kube-prometheus-stack
        repo: "https://prometheus-community.github.io/helm-charts"
        valuesContent: |-
          kubeEtcd:
            enabled: false
          kubeControllerManager:
            enabled: false
          kubeScheduler:
            enabled: false
          kubeProxy:
            enabled: false
          alertmanager:
            config:
              route:
                group_by: ['job']
                group_wait: 30s
                group_interval: 5m
                repeat_interval: 1h
                receiver: 'null'
                routes:
                - match:
                    alertname: Watchdog
                  receiver: 'null'
                - match:
                    alertname: CPUThrottlingHigh
                  receiver: 'null'
                - match:
                    alertname: KubeMemoryOvercommit
                  receiver: 'null'
                - match:
                    alertname: KubeCPUOvercommit
                  receiver: 'null'
                - match:
                    alertname: KubeletTooManyPods
                  receiver: 'null'
              receivers:
              - name: 'null'
              inhibit_rules:
              - source_match:
                  severity: 'critical'
                target_match:
                  severity: 'warning'
                # Apply inhibition if the alertname is the same.
                equal: ['alertname', 'namespace']
            alertmanagerSpec:
              storage:
                volumeClaimTemplate:
                  spec:
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 1Gi
          prometheus:
            prometheusSpec:
              retention: 3d
              storageSpec:
                volumeClaimTemplate:
                  spec:
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 10Gi
              podMonitorSelectorNilUsesHelmValues: false
              #probeSelectorNilUsesHelmValues: false
              #ruleSelectorNilUsesHelmValues: false
              serviceMonitorSelectorNilUsesHelmValues: false
            additionalServiceMonitors:
              - name: gpu-operator-dcgm-exporter
                namespaceSelector:
                  matchNames:
                    - gpu-operator
                selector:
                  matchLabels:
                    app: nvidia-dcgm-exporter
                endpoints:
                  - port: gpu-metrics
                    path: /metrics
                    interval: 15s
            additionalPodMonitors:
              - name: traefik-metrics
                namespaceSelector:
                  matchNames:
                    - kube-system
                selector:
                  matchLabels:
                    app.kubernetes.io/name: traefik
                podMetricsEndpoints:
                  - port: metrics
                    path: /metrics
                    interval: 15s
          grafana:
            plugins:
              - grafana-piechart-panel

- name: wait for prometheus CRDs to finish initializing
  ansible.builtin.command:
    cmd: "k3s kubectl wait --for=condition=established {{ item }} --timeout=900s"
  loop:
    - crd/podmonitors.monitoring.coreos.com
    - crd/servicemonitors.monitoring.coreos.com
  retries: 5
  delay: 5
  changed_when: False
  register: result
  until: result is success
